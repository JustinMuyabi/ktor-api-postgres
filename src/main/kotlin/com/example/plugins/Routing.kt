package com.example.pluginsimport com.auth0.jwt.JWTimport com.example.data.models.Authenticationimport com.example.plugins.user.routes.userRoutesimport com.example.utils.JwtConfigimport io.github.smiley4.ktorswaggerui.SwaggerUIimport io.github.smiley4.ktorswaggerui.dsl.getimport io.ktor.http.*import io.ktor.server.application.*import io.ktor.server.application.Applicationimport io.ktor.server.application.installimport io.ktor.server.auth.*import io.ktor.server.request.*import io.ktor.server.response.*import io.ktor.server.routing.*import io.ktor.server.webjars.*fun Application.configureRouting() {    install(Webjars) {        path = "/webjars" //defaults to /webjars    }    install(SwaggerUI) {        swagger {            swaggerUrl = "swagger-ui"            forwardRoot = true        }        info {            title = "Example API"            version = "latest"            description = "Example API for testing and demonstration purposes."        }        server {            url = "http://0.0.0.0:8080"            description = "Development Server"        }        externalDocs {            url = "https://github.com/Smiley4/ktor-swagger-ui"            description = "GitHub Repository"        }    }    routing {        get("/") {            call.respondText("Hello World!")        }        get("/webjars") {            call.respondText("<script src='/webjars/jquery/jquery.js'></script>", ContentType.Text.Html)        }        post("/login") {            val auth = call.receive<Authentication>()            val token = JwtConfig.makeToken(auth.email)            call.respond(hashMapOf("token" to token))        }        authenticate("auth-jwt") {            userRoutes()        }    }}